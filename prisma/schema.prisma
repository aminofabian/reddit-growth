// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    relationMode = "prisma"

}
enum UserRole {
  ADMIN
  USER
  VERIFIED_USER
}
model User {
  id            String    @id @default(cuid())
  firstName          String?
  lastName          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password       String?
  role            UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean   @default(false)
 
  @@map("users")
  RedditAccount RedditAccount[]
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model VerificationToken { 
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])
}

model PasswordResetToken {
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])

}

model RedditAccount {
  id            String   @id @default(cuid())
  userId        String
  redditUsername String
  redditPassword String? // Making it optional since existing accounts won't have it
  accessToken   String
  refreshToken  String
  tokenExpires  DateTime
  karmaCount    Int
  createdAt     DateTime @default(now()) // Adding this to sort by latest
  updatedAt     DateTime @updatedAt      // Track updates
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, redditUsername])
}
